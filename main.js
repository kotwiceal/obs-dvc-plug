/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DVCPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var DEFAULT_SETTINGS = {
  autostage: false,
  autopull: false,
  autopullExtension: []
};
var DVC = class {
  constructor(plug) {
    this.plug = plug;
    this.cwd = () => {
      if (this.plug.app.vault.adapter instanceof import_obsidian.FileSystemAdapter) {
        return this.plug.app.vault.adapter.getBasePath();
      }
      return "";
    };
    this.getFiles();
  }
  shell(command, show = true) {
    return new Promise((resolve, reject) => {
      (0, import_child_process.exec)(command, { cwd: this.cwd() }, (err, stdout, stderr) => {
        if (err) {
          console.log(err);
          new import_obsidian.Notice(stderr);
          reject(stderr);
          return;
        }
        resolve(stdout);
        if (show) {
          console.log(stdout);
          new import_obsidian.Notice(stdout);
        }
      });
    });
  }
  cli(command, argument, show = true) {
    let arg = "";
    if (typeof argument == "string") {
      arg = argument;
    } else {
      if (Array.isArray(argument)) {
        arg = argument.map((file) => `"${file.path}"`).join(" ");
      } else {
        arg = `"${argument.path}"`;
      }
    }
    this.shell(`dvc ${command} ${arg}`, show);
  }
  status(show = true) {
    this.cli("status", "", show);
  }
  add(arg, show = true) {
    this.cli("add", arg);
    this.getFiles();
  }
  push(arg, show = true) {
    this.cli("push", arg);
  }
  pull(arg, show = true) {
    this.cli("pull", arg);
  }
  remove(arg, show = true) {
    this.cli("remove", arg);
  }
  getFiles() {
    this.files = this.plug.app.vault.getFiles().filter((file) => file.extension == "dvc");
  }
  getRemote() {
    return new Promise((resolve, reject) => {
      this.shell("dvc remote list").then((data) => {
        const lines = data.split(/\r?\n/);
        this.remote = lines.map((value) => {
          const substr = value.split("	");
          return { name: substr[0], path: substr[1] };
        });
        resolve(this.remote);
      }).catch((err) => reject(err));
    });
  }
};
var DVCPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.dvc = new DVC(this);
    this.addCommand({
      id: "dvc-init",
      name: "dvc: init",
      callback: () => {
        this.dvc.shell("git init && dvc init -f");
      }
    });
    this.addCommand({
      id: "dvc-remote",
      name: "dvc: remote",
      callback: () => {
        this.dvc.getRemote().then((data) => {
          console.log(data);
        });
      }
    });
    this.addCommand({
      id: "dvc-push",
      name: "dvc: push all files",
      callback: () => {
        this.dvc.cli("push", "");
      }
    });
    this.addCommand({
      id: "dvc-pull",
      name: "dvc: pull all files",
      callback: () => {
        this.dvc.cli("pull", "");
      }
    });
    this.addCommand({
      id: "dvc-garbage-cache-workspace",
      name: "dvc: garbage cache from workspace",
      callback: () => {
        this.dvc.cli("gc", "-w -f");
      }
    });
    this.addCommand({
      id: "dvc-garbage-cache-workspace-cloud",
      name: "dvc: garbage cache from workspace and cloud",
      callback: () => {
        this.dvc.cli("gc", "-w -c -f");
      }
    });
    this.addSettingTab(new DVCSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        [
          { com: "add", icon: "book-plus" },
          { com: "push", icon: "book-up" },
          { com: "pull", icon: "book-down" },
          { com: "remove", icon: "book-minus" }
        ].map((element) => {
          menu.addItem((item) => {
            item.setTitle(`dvc: ${element.com}`).setIcon(element.icon).onClick(async () => {
              this.dvc.cli(element.com, [file]);
            });
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("files-menu", (menu, files) => {
        [
          { com: "add", icon: "book-plus" },
          { com: "push", icon: "book-up" },
          { com: "pull", icon: "book-down" },
          { com: "remove", icon: "book-minus" }
        ].map((element) => {
          menu.addItem((item) => {
            item.setTitle(`dvc: ${element.com}`).setIcon(element.icon).onClick(async () => {
              this.dvc.cli(element.com, files);
            });
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-open", async (file) => {
        if (file && this.settings.autopull) {
          const fileCache = this.app.metadataCache.getFileCache(file);
          if (fileCache && fileCache.embeds) {
            const dvcFiles = fileCache.embeds.map((embed) => {
              if (this.settings.autopullExtension.some((item) => embed.link.includes(item))) {
                return this.dvc.files.find((dvcFile) => dvcFile.basename == embed.link);
              }
              return null;
            });
            if (dvcFiles) {
              this.dvc.pull(dvcFiles.filter((item) => item));
            }
          }
        }
      })
    );
    this.dvc.status();
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DVCSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Auto stage").setDesc("Enable git stage files after dvc adding").addToggle((component) => component.setValue(this.plugin.settings.autostage).onChange(async (value) => {
      this.plugin.dvc.cli("config", `--local core.autostage ${value}`, false);
      this.plugin.settings.autostage = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Auto data pull").setDesc("Enable file attachment pull").addToggle((component) => component.setValue(this.plugin.settings.autopull).onChange(async (value) => {
      this.plugin.settings.autopull = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Extension list of auto pull mode").setDesc("File attachment extension list to auto pull").addText((text) => text.setPlaceholder("Enter a list of extensions separated by spaces").setValue(this.plugin.settings.autopullExtension.join(" ")).onChange(async (value) => {
      this.plugin.settings.autopullExtension = value.trim().replace(/\s+/g, " ").split(" ");
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
